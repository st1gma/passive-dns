#!/usr/bin/env ruby
require 'rubygems'
require 'passive-dns'
require 'yaml'

#if __FILE__ == $0
	def pdnslookup(state,pdnsdbs,recursedepth=1,wait=0,debug=false)
		puts "pdnslookup: #{state.level} #{recursedepth}" if debug
		level = 0
		while level < recursedepth
			puts "pdnslookup: #{level} < #{recursedepth}" if debug
			state.each_query(recursedepth) do |q|
				pdnsdbs.each do |pdnsdb|
					rv = pdnsdb.lookup(q)
					if rv
						rv.each do |r|
							if ["A","AAAA","NS","CNAME","PTR"].index(r.rrtype)
								puts "pdnslookup: #{r.to_s}" if debug
								state.add_result(r)
							end
						end
					else
						state.update_query(rv,'failed')
					end
				end
				sleep wait if level < recursedepth
			end
			level += 1
		end
		state
	end
	
	def printresults(state,format,sep="\t")
		case format
		when 'text'
			puts state.to_s(sep)
		when 'yaml'
			puts state.to_yaml
		when 'xml'
			puts state.to_xml
		when 'json'
			puts state.to_json
		when 'gdf'
			puts state.to_gdf
		when 'graphviz'
			puts state.to_graphviz
		when 'graphml'
			puts state.to_graphml
		end
	end

	def usage
		puts "Usage: #{$0} [-a|-b|-d|-i|-e] [-c|-x|-y|-j|-t] [-s <sep>] [-f <file>] [-r#|-w#|-l] <ip|domain|cidr>"
		puts "  -a uses all of the available passive dns databases"
		puts "  -b only use BFK"
		puts "  -d only use DNSParse (default)"
		puts "  -i only use ISC"
		puts "  -e only use CERT-EE"
		puts "  -g outputs a link-nodal GDF visualization definition"
		puts "  -v outputs a link-nodal graphviz visualization definition"
		puts "  -m output a link-nodal graphml visualization definition"
		puts "  -c outputs CSV"
		puts "  -x outputs XML"
		puts "  -y outputs YAML"
		puts "  -j outputs JSON"
		puts "  -t outputs ASCII text (default)"
		puts "  -s <sep> specifies a field separator for text output, default is tab"
		puts "  -f[file] specifies a sqlite3 database used to read the current state - useful for large result sets and generating graphs of previous runs."
		puts "  -r# specifies the levels of recursion to pull. **WARNING** This is quite taxing on the pDNS servers, so use judiciously (never more than 3 or so) or find yourself blocked!"
		puts "  -w# specifies the amount of time to wait, in seconds, between queries (Default: 0)"
		puts "  -l outputs debugging information"
		exit
	end
	
	opts = GetoptLong.new(
		[ '--help', '-h', GetoptLong::NO_ARGUMENT ],
		[ '--debug', '-l', GetoptLong::NO_ARGUMENT ],
		[ '--all', '-a', GetoptLong::NO_ARGUMENT ],
		[ '--bfk', '-b', GetoptLong::NO_ARGUMENT ],
		[ '--dnsparse', '-d', GetoptLong::NO_ARGUMENT ],
		[ '--isc', '-i', GetoptLong::NO_ARGUMENT ],
		[ '--certee', '-e', GetoptLong::NO_ARGUMENT ],
		[ '--gdf', '-g', GetoptLong::NO_ARGUMENT ],
		[ '--graphviz', '-v', GetoptLong::NO_ARGUMENT ],
		[ '--graphml', '-m', GetoptLong::NO_ARGUMENT ],
		[ '--csv', '-c', GetoptLong::NO_ARGUMENT ],
		[ '--xml', '-x', GetoptLong::NO_ARGUMENT ],
		[ '--yaml', '-y', GetoptLong::NO_ARGUMENT ],
		[ '--json', '-j', GetoptLong::NO_ARGUMENT ],
		[ '--text', '-t', GetoptLong::NO_ARGUMENT ],
		[ '--sep', '-s', GetoptLong::REQUIRED_ARGUMENT ],
		[ '--sqlite3', '-f', GetoptLong::REQUIRED_ARGUMENT ],
		[ '--recurse', '-r', GetoptLong::REQUIRED_ARGUMENT ],
		[ '--wait', '-w', GetoptLong::REQUIRED_ARGUMENT ]
	)
	
	# sets the default search methods
	pdnsdbs = []
	format = "text"
	sep = "\t"
	recursedepth = 1
	wait = 0
	res = nil
	debug = false
	sqlitedb = nil
	
	opts.each do |opt, arg|
		case opt
		when '--help'
			usage
		when '--debug'
			debug = true
			$stderr.puts "Using proxy settings: http_proxy=#{ENV['http_proxy']}, https_proxy=#{ENV['https_proxy']}"
		when '--all'
			pdnsdbs << PassiveDNS::BFKClient.new
			pdnsdbs << PassiveDNS::DNSParse.new
			pdnsdbs << PassiveDNS::ISC.new
			pdnsdbs << PassiveDNS::CERTEE.new
		when '--bfk'
			pdnsdbs << PassiveDNS::BFKClient.new
		when '--dnsparse'
			pdnsdbs << PassiveDNS::DNSParse.new
		when '--isc'
			pdnsdbs << PassiveDNS::ISC.new
		when '--certee'
			pdnsdbs << PassiveDNS::CERTEE.new
		when '--gdf'
			format = 'gdf'
		when '--graphviz'
			format = 'graphviz'
		when '--graphml'
			format = 'graphml'
		when '--csv'
			format = 'text'
			sep = ','
		when '--yaml'
			format = 'yaml'
		when '--xml'
			format = 'xml'
		when '--json'
			format = 'json'
		when '--text'
			format = 'text'
		when '--sep'
			sep = arg
		when '--recurse'
			recursedepth = arg.to_i
			if recursedepth > 3
				$stderr.puts "WARNING:  a recursedepth of > 3 can be abusive, please reconsider: sleeping 60 seconds for sense to come to you (hint: hit CTRL-C)"
				sleep 60
			end
		when '--wait'
			wait = arg.to_i
		when '--sqlite3'
			sqlitedb = arg
		else
			usage
		end
	end
	
	if pdnsdbs.length == 0
		pdnsdbs << PassiveDNS::DNSParse.new
	end
	
	pdnsdbs.each do |pdnsdb|
		pdnsdb.debug = true if debug
		if pdnsdb.class.to_s == "PassiveDNS::BFKClient" and recursedepth > 1 and wait < 60
			wait = 60
			$stderr.puts "Enforcing a minimal 60 second wait when using BFK for recursive crawling"
		end
	end
	
	state = nil
	if sqlitedb
		state = PassiveDNS::PDNSToolStateDB.new(sqlitedb)
	else
		state = PassiveDNS::PDNSToolState.new
	end
	state.debug = true if debug
	
	if ARGV.length > 0
		ARGV.each do |arg|
			state.add_query(arg,'pending',0)
		end
	else
		$stdin.each_line do |l|
			state.add_query(l.chomp,'pending',0)
		end
	end
	pdnslookup(state,pdnsdbs,recursedepth,wait,debug)
	printresults(state,format,sep)
#end